{
	"info": {
		"_postman_id": "944b716a-9d46-4373-8f43-c00c8b8b12a3",
		"name": "Spring-boot-lessons",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31246654"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id field is present and is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.id).to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Firstname and Lastname should be non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Firstname should not be empty\");\r",
									"  pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Lastname should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\":\"adasfth\",\r\n    \"lastName\":\"Mnb\",\r\n    \"email\":\"xvxcb@.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/customers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, firstName, lastName, and email\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    responseData.forEach(function(customer) {\r",
									"        pm.expect(customer).to.have.property('id');\r",
									"        pm.expect(customer).to.have.property('firstName');\r",
									"        pm.expect(customer).to.have.property('lastName');\r",
									"        pm.expect(customer).to.have.property('email');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array with at least one element\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/customers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id should be a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"First name and last name should be non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");\r",
									"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/customers/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"customers",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"  pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"  });\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response body is null\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Customer with ID 3 is deleted from the database\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the response does not contain any sensitive information\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/customers/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"customers",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('firstName');\r",
									"    pm.expect(responseData).to.have.property('lastName');\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"First name and last name should be non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");\r",
									"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\":\"Milan\",\r\n    \"lastName\":\"Mnob\",\r\n    \"email\":\"iconFinb@.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/customers/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"customers",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "Create book",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authorFirstname\":\"Peter\",\r\n    \"authorLastname\" : \"Lynch\",\r\n    \"title\" : \"One up on Wall Street\",\r\n    \"isbn\" : \"ISBN12A69C\",\r\n    \"count\" : 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find all books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find book by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete book by id",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authorFirstname\":\"Peter\",\r\n    \"authorLastname\" : \"Lynch\",\r\n    \"title\" : \"One up on Wall Street\",\r\n    \"isbn\" : \"ISBN12A69C\",\r\n    \"count\" : 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/books/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"books",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update book by id",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/books/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"books",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Borrowings",
			"item": [
				{
					"name": "Create Borrowings",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerId\": 4,\r\n    \"bookId\" : 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/borrowings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"borrowings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find all Borrowings",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/borrowings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"borrowings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Borrowings by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/borrowings/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"borrowings",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Borrowings by id",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/borrowings/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"borrowings",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}